# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fiducial_msgs/FiducialArray.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import fiducial_msgs.msg
import std_msgs.msg

class FiducialArray(genpy.Message):
  _md5sum = "fd851a0658e8a35a4d4f80b76d9f17a0"
  _type = "fiducial_msgs/FiducialArray"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """ # A set of fiducial vertex messages
 # to an image
 Header header
 int32 image_seq
 Fiducial[] fiducials 

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: fiducial_msgs/Fiducial
 # Details of a detected fiducial.

 int32 fiducial_id
 int32 direction

 # vertices
 float64 x0
 float64 y0
 float64 x1
 float64 y1
 float64 x2
 float64 y2
 float64 x3
 float64 y3
"""
  __slots__ = ['header','image_seq','fiducials']
  _slot_types = ['std_msgs/Header','int32','fiducial_msgs/Fiducial[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,image_seq,fiducials

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FiducialArray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.image_seq is None:
        self.image_seq = 0
      if self.fiducials is None:
        self.fiducials = []
    else:
      self.header = std_msgs.msg.Header()
      self.image_seq = 0
      self.fiducials = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.image_seq))
      length = len(self.fiducials)
      buff.write(_struct_I.pack(length))
      for val1 in self.fiducials:
        _x = val1
        buff.write(_get_struct_2i8d().pack(_x.fiducial_id, _x.direction, _x.x0, _x.y0, _x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fiducials is None:
        self.fiducials = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.image_seq,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fiducials = []
      for i in range(0, length):
        val1 = fiducial_msgs.msg.Fiducial()
        _x = val1
        start = end
        end += 72
        (_x.fiducial_id, _x.direction, _x.x0, _x.y0, _x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3,) = _get_struct_2i8d().unpack(str[start:end])
        self.fiducials.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.image_seq))
      length = len(self.fiducials)
      buff.write(_struct_I.pack(length))
      for val1 in self.fiducials:
        _x = val1
        buff.write(_get_struct_2i8d().pack(_x.fiducial_id, _x.direction, _x.x0, _x.y0, _x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fiducials is None:
        self.fiducials = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.image_seq,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fiducials = []
      for i in range(0, length):
        val1 = fiducial_msgs.msg.Fiducial()
        _x = val1
        start = end
        end += 72
        (_x.fiducial_id, _x.direction, _x.x0, _x.y0, _x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3,) = _get_struct_2i8d().unpack(str[start:end])
        self.fiducials.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2i8d = None
def _get_struct_2i8d():
    global _struct_2i8d
    if _struct_2i8d is None:
        _struct_2i8d = struct.Struct("<2i8d")
    return _struct_2i8d
