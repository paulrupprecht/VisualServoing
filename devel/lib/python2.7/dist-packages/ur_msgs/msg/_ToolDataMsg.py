# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ur_msgs/ToolDataMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ToolDataMsg(genpy.Message):
  _md5sum = "404fc266f37d89f75b372d12fa94a122"
  _type = "ur_msgs/ToolDataMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This data structure contains the ToolData structure
# used by the Universal Robots controller

int8 ANALOG_INPUT_RANGE_CURRENT = 0
int8 ANALOG_INPUT_RANGE_VOLTAGE = 1

int8 analog_input_range2 # one of ANALOG_INPUT_RANGE_*
int8 analog_input_range3 # one of ANALOG_INPUT_RANGE_*
float64 analog_input2
float64 analog_input3
float32 tool_voltage_48v
uint8 tool_output_voltage
float32 tool_current
float32 tool_temperature

uint8 TOOL_BOOTLOADER_MODE = 249
uint8 TOOL_RUNNING_MODE = 253
uint8 TOOL_IDLE_MODE = 255

uint8 tool_mode # one of TOOL_*
"""
  # Pseudo-constants
  ANALOG_INPUT_RANGE_CURRENT = 0
  ANALOG_INPUT_RANGE_VOLTAGE = 1
  TOOL_BOOTLOADER_MODE = 249
  TOOL_RUNNING_MODE = 253
  TOOL_IDLE_MODE = 255

  __slots__ = ['analog_input_range2','analog_input_range3','analog_input2','analog_input3','tool_voltage_48v','tool_output_voltage','tool_current','tool_temperature','tool_mode']
  _slot_types = ['int8','int8','float64','float64','float32','uint8','float32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       analog_input_range2,analog_input_range3,analog_input2,analog_input3,tool_voltage_48v,tool_output_voltage,tool_current,tool_temperature,tool_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ToolDataMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.analog_input_range2 is None:
        self.analog_input_range2 = 0
      if self.analog_input_range3 is None:
        self.analog_input_range3 = 0
      if self.analog_input2 is None:
        self.analog_input2 = 0.
      if self.analog_input3 is None:
        self.analog_input3 = 0.
      if self.tool_voltage_48v is None:
        self.tool_voltage_48v = 0.
      if self.tool_output_voltage is None:
        self.tool_output_voltage = 0
      if self.tool_current is None:
        self.tool_current = 0.
      if self.tool_temperature is None:
        self.tool_temperature = 0.
      if self.tool_mode is None:
        self.tool_mode = 0
    else:
      self.analog_input_range2 = 0
      self.analog_input_range3 = 0
      self.analog_input2 = 0.
      self.analog_input3 = 0.
      self.tool_voltage_48v = 0.
      self.tool_output_voltage = 0
      self.tool_current = 0.
      self.tool_temperature = 0.
      self.tool_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2b2dfB2fB().pack(_x.analog_input_range2, _x.analog_input_range3, _x.analog_input2, _x.analog_input3, _x.tool_voltage_48v, _x.tool_output_voltage, _x.tool_current, _x.tool_temperature, _x.tool_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.analog_input_range2, _x.analog_input_range3, _x.analog_input2, _x.analog_input3, _x.tool_voltage_48v, _x.tool_output_voltage, _x.tool_current, _x.tool_temperature, _x.tool_mode,) = _get_struct_2b2dfB2fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2b2dfB2fB().pack(_x.analog_input_range2, _x.analog_input_range3, _x.analog_input2, _x.analog_input3, _x.tool_voltage_48v, _x.tool_output_voltage, _x.tool_current, _x.tool_temperature, _x.tool_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.analog_input_range2, _x.analog_input_range3, _x.analog_input2, _x.analog_input3, _x.tool_voltage_48v, _x.tool_output_voltage, _x.tool_current, _x.tool_temperature, _x.tool_mode,) = _get_struct_2b2dfB2fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2b2dfB2fB = None
def _get_struct_2b2dfB2fB():
    global _struct_2b2dfB2fB
    if _struct_2b2dfB2fB is None:
        _struct_2b2dfB2fB = struct.Struct("<2b2dfB2fB")
    return _struct_2b2dfB2fB
