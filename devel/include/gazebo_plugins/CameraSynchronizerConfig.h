//#line 2 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the gazebo_plugins package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __gazebo_plugins__CAMERASYNCHRONIZERCONFIG_H__
#define __gazebo_plugins__CAMERASYNCHRONIZERCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace gazebo_plugins
{
  class CameraSynchronizerConfigStatics;

  class CameraSynchronizerConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(CameraSynchronizerConfig &config, const CameraSynchronizerConfig &max, const CameraSynchronizerConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const CameraSynchronizerConfig &config1, const CameraSynchronizerConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, CameraSynchronizerConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const CameraSynchronizerConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, CameraSynchronizerConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const CameraSynchronizerConfig &config) const = 0;
      virtual void getValue(const CameraSynchronizerConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T CameraSynchronizerConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (CameraSynchronizerConfig::* field);

      virtual void clamp(CameraSynchronizerConfig &config, const CameraSynchronizerConfig &max, const CameraSynchronizerConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const CameraSynchronizerConfig &config1, const CameraSynchronizerConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, CameraSynchronizerConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const CameraSynchronizerConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, CameraSynchronizerConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const CameraSynchronizerConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const CameraSynchronizerConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, CameraSynchronizerConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, CameraSynchronizerConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<CameraSynchronizerConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(CameraSynchronizerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("projector_rate"==(*_i)->name){projector_rate = boost::any_cast<double>(val);}
        if("projector_pulse_length"==(*_i)->name){projector_pulse_length = boost::any_cast<double>(val);}
        if("projector_pulse_shift"==(*_i)->name){projector_pulse_shift = boost::any_cast<double>(val);}
        if("projector_mode"==(*_i)->name){projector_mode = boost::any_cast<int>(val);}
        if("prosilica_projector_inhibit"==(*_i)->name){prosilica_projector_inhibit = boost::any_cast<bool>(val);}
        if("stereo_rate"==(*_i)->name){stereo_rate = boost::any_cast<double>(val);}
        if("wide_stereo_trig_mode"==(*_i)->name){wide_stereo_trig_mode = boost::any_cast<int>(val);}
        if("narrow_stereo_trig_mode"==(*_i)->name){narrow_stereo_trig_mode = boost::any_cast<int>(val);}
        if("forearm_r_rate"==(*_i)->name){forearm_r_rate = boost::any_cast<double>(val);}
        if("forearm_r_trig_mode"==(*_i)->name){forearm_r_trig_mode = boost::any_cast<int>(val);}
        if("forearm_l_rate"==(*_i)->name){forearm_l_rate = boost::any_cast<double>(val);}
        if("forearm_l_trig_mode"==(*_i)->name){forearm_l_trig_mode = boost::any_cast<int>(val);}
        if("projector_tweak"==(*_i)->name){projector_tweak = boost::any_cast<double>(val);}
        if("camera_reset"==(*_i)->name){camera_reset = boost::any_cast<bool>(val);}
      }
    }

    double projector_rate;
double projector_pulse_length;
double projector_pulse_shift;
int projector_mode;
bool prosilica_projector_inhibit;
double stereo_rate;
int wide_stereo_trig_mode;
int narrow_stereo_trig_mode;
double forearm_r_rate;
int forearm_r_trig_mode;
double forearm_l_rate;
int forearm_l_trig_mode;
double projector_tweak;
bool camera_reset;

    bool state;
    std::string name;

    
}groups;



//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double projector_rate;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double projector_pulse_length;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double projector_pulse_shift;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int projector_mode;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool prosilica_projector_inhibit;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double stereo_rate;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int wide_stereo_trig_mode;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int narrow_stereo_trig_mode;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double forearm_r_rate;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int forearm_r_trig_mode;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double forearm_l_rate;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int forearm_l_trig_mode;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double projector_tweak;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool camera_reset;
//#line 228 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("CameraSynchronizerConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const CameraSynchronizerConfig &__max__ = __getMax__();
      const CameraSynchronizerConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const CameraSynchronizerConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const CameraSynchronizerConfig &__getDefault__();
    static const CameraSynchronizerConfig &__getMax__();
    static const CameraSynchronizerConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const CameraSynchronizerConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void CameraSynchronizerConfig::ParamDescription<std::string>::clamp(CameraSynchronizerConfig &config, const CameraSynchronizerConfig &max, const CameraSynchronizerConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class CameraSynchronizerConfigStatics
  {
    friend class CameraSynchronizerConfig;

    CameraSynchronizerConfigStatics()
    {
CameraSynchronizerConfig::GroupDescription<CameraSynchronizerConfig::DEFAULT, CameraSynchronizerConfig> Default("Default", "", 0, 0, true, &CameraSynchronizerConfig::groups);
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.projector_rate = 40.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.projector_rate = 120.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.projector_rate = 60.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<double>("projector_rate", "double", 31, "Projector pulse frequency in Hz.", "", &CameraSynchronizerConfig::projector_rate)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<double>("projector_rate", "double", 31, "Projector pulse frequency in Hz.", "", &CameraSynchronizerConfig::projector_rate)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.projector_pulse_length = 0.001;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.projector_pulse_length = 0.002;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.projector_pulse_length = 0.002;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<double>("projector_pulse_length", "double", 31, "Length of the projector pulses in s. At high currents the hardware may limit the pulse length.", "", &CameraSynchronizerConfig::projector_pulse_length)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<double>("projector_pulse_length", "double", 31, "Length of the projector pulses in s. At high currents the hardware may limit the pulse length.", "", &CameraSynchronizerConfig::projector_pulse_length)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.projector_pulse_shift = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.projector_pulse_shift = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.projector_pulse_shift = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<double>("projector_pulse_shift", "double", 31, "How far off-center the intermediate projector pulses are. Zero is on-center, one is touching the following pulse.", "", &CameraSynchronizerConfig::projector_pulse_shift)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<double>("projector_pulse_shift", "double", 31, "How far off-center the intermediate projector pulses are. Zero is on-center, one is touching the following pulse.", "", &CameraSynchronizerConfig::projector_pulse_shift)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.projector_mode = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.projector_mode = 3;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.projector_mode = 2;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<int>("projector_mode", "int", 31, "Indicates whether the projector should be off, on when in use or on all the time.", "{'enum_description': 'The projectors operating mode.', 'enum': [{'srcline': 56, 'description': 'The projector is always off.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'ProjectorOff'}, {'srcline': 57, 'description': 'The projector is on if one of the cameras is using it.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'ProjectorAuto'}, {'srcline': 58, 'description': 'The projector is always on.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'ProjectorOn'}]}", &CameraSynchronizerConfig::projector_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<int>("projector_mode", "int", 31, "Indicates whether the projector should be off, on when in use or on all the time.", "{'enum_description': 'The projectors operating mode.', 'enum': [{'srcline': 56, 'description': 'The projector is always off.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'ProjectorOff'}, {'srcline': 57, 'description': 'The projector is on if one of the cameras is using it.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'ProjectorAuto'}, {'srcline': 58, 'description': 'The projector is always on.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'ProjectorOn'}]}", &CameraSynchronizerConfig::projector_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.prosilica_projector_inhibit = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.prosilica_projector_inhibit = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.prosilica_projector_inhibit = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<bool>("prosilica_projector_inhibit", "bool", 16, "Indicates if the projector should turn off when the prosilica camera is exposing.", "", &CameraSynchronizerConfig::prosilica_projector_inhibit)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<bool>("prosilica_projector_inhibit", "bool", 16, "Indicates if the projector should turn off when the prosilica camera is exposing.", "", &CameraSynchronizerConfig::prosilica_projector_inhibit)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.stereo_rate = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.stereo_rate = 60.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.stereo_rate = 30.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<double>("stereo_rate", "double", 3, "Indicates the frame rate for both stereo cameras in Hz. (Gets rounded to suitable divisors of projector_rate.)", "", &CameraSynchronizerConfig::stereo_rate)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<double>("stereo_rate", "double", 3, "Indicates the frame rate for both stereo cameras in Hz. (Gets rounded to suitable divisors of projector_rate.)", "", &CameraSynchronizerConfig::stereo_rate)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.wide_stereo_trig_mode = 2;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.wide_stereo_trig_mode = 4;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.wide_stereo_trig_mode = 4;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<int>("wide_stereo_trig_mode", "int", 3, "Indicates the triggering mode of the wide stereo camera.", "{'enum_description': 'The triggering mode for the wide camera.', 'enum': [{'srcline': 62, 'description': 'The cameras frequency can be set independently of the projector frequency. There is no deterministic phase relation between projector firing and camera triggering.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'IgnoreProjector'}, {'srcline': 63, 'description': 'The camera always exposes while the projector is on.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'WithProjector'}, {'srcline': 64, 'description': 'The camera always exposes while the projector is off.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'WithoutProjector'}]}", &CameraSynchronizerConfig::wide_stereo_trig_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<int>("wide_stereo_trig_mode", "int", 3, "Indicates the triggering mode of the wide stereo camera.", "{'enum_description': 'The triggering mode for the wide camera.', 'enum': [{'srcline': 62, 'description': 'The cameras frequency can be set independently of the projector frequency. There is no deterministic phase relation between projector firing and camera triggering.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'IgnoreProjector'}, {'srcline': 63, 'description': 'The camera always exposes while the projector is on.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'WithProjector'}, {'srcline': 64, 'description': 'The camera always exposes while the projector is off.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'WithoutProjector'}]}", &CameraSynchronizerConfig::wide_stereo_trig_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.narrow_stereo_trig_mode = 2;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.narrow_stereo_trig_mode = 5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.narrow_stereo_trig_mode = 4;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<int>("narrow_stereo_trig_mode", "int", 3, "Indicates the triggering mode of the narrow stereo camera.", "{'enum_description': 'The triggering mode for the narrow camera.', 'enum': [{'srcline': 62, 'description': 'The cameras frequency can be set independently of the projector frequency. There is no deterministic phase relation between projector firing and camera triggering.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'IgnoreProjector'}, {'srcline': 63, 'description': 'The camera always exposes while the projector is on.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'WithProjector'}, {'srcline': 64, 'description': 'The camera always exposes while the projector is off.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'WithoutProjector'}, {'srcline': 65, 'description': 'The camera alternates between frames with and without the projector.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'AlternateProjector'}]}", &CameraSynchronizerConfig::narrow_stereo_trig_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<int>("narrow_stereo_trig_mode", "int", 3, "Indicates the triggering mode of the narrow stereo camera.", "{'enum_description': 'The triggering mode for the narrow camera.', 'enum': [{'srcline': 62, 'description': 'The cameras frequency can be set independently of the projector frequency. There is no deterministic phase relation between projector firing and camera triggering.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'IgnoreProjector'}, {'srcline': 63, 'description': 'The camera always exposes while the projector is on.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'WithProjector'}, {'srcline': 64, 'description': 'The camera always exposes while the projector is off.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'WithoutProjector'}, {'srcline': 65, 'description': 'The camera alternates between frames with and without the projector.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'AlternateProjector'}]}", &CameraSynchronizerConfig::narrow_stereo_trig_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.forearm_r_rate = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.forearm_r_rate = 60.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.forearm_r_rate = 30.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<double>("forearm_r_rate", "double", 4, "Indicates the frame rate for the right forearm camera in Hz. (Gets rounded to suitable divisors of projector_rate.)", "", &CameraSynchronizerConfig::forearm_r_rate)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<double>("forearm_r_rate", "double", 4, "Indicates the frame rate for the right forearm camera in Hz. (Gets rounded to suitable divisors of projector_rate.)", "", &CameraSynchronizerConfig::forearm_r_rate)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.forearm_r_trig_mode = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.forearm_r_trig_mode = 4;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.forearm_r_trig_mode = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<int>("forearm_r_trig_mode", "int", 4, "Indicates the triggering mode of the right forearm camera.", "{'enum_description': 'The triggering mode for a forearm camera.', 'enum': [{'srcline': 61, 'description': 'The camera does not use the trigger input.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'InternalTrigger'}, {'srcline': 62, 'description': 'The cameras frequency can be set independently of the projector frequency. There is no deterministic phase relation between projector firing and camera triggering.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'IgnoreProjector'}, {'srcline': 63, 'description': 'The camera always exposes while the projector is on.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'WithProjector'}, {'srcline': 64, 'description': 'The camera always exposes while the projector is off.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'WithoutProjector'}]}", &CameraSynchronizerConfig::forearm_r_trig_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<int>("forearm_r_trig_mode", "int", 4, "Indicates the triggering mode of the right forearm camera.", "{'enum_description': 'The triggering mode for a forearm camera.', 'enum': [{'srcline': 61, 'description': 'The camera does not use the trigger input.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'InternalTrigger'}, {'srcline': 62, 'description': 'The cameras frequency can be set independently of the projector frequency. There is no deterministic phase relation between projector firing and camera triggering.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'IgnoreProjector'}, {'srcline': 63, 'description': 'The camera always exposes while the projector is on.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'WithProjector'}, {'srcline': 64, 'description': 'The camera always exposes while the projector is off.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'WithoutProjector'}]}", &CameraSynchronizerConfig::forearm_r_trig_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.forearm_l_rate = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.forearm_l_rate = 60.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.forearm_l_rate = 30.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<double>("forearm_l_rate", "double", 8, "Indicates the frame rate for the left forearm camera in Hz. (Gets rounded to suitable divisors of projector_rate.)", "", &CameraSynchronizerConfig::forearm_l_rate)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<double>("forearm_l_rate", "double", 8, "Indicates the frame rate for the left forearm camera in Hz. (Gets rounded to suitable divisors of projector_rate.)", "", &CameraSynchronizerConfig::forearm_l_rate)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.forearm_l_trig_mode = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.forearm_l_trig_mode = 4;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.forearm_l_trig_mode = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<int>("forearm_l_trig_mode", "int", 8, "Indicates the triggering mode of the left forearm camera.", "{'enum_description': 'The triggering mode for a forearm camera.', 'enum': [{'srcline': 61, 'description': 'The camera does not use the trigger input.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'InternalTrigger'}, {'srcline': 62, 'description': 'The cameras frequency can be set independently of the projector frequency. There is no deterministic phase relation between projector firing and camera triggering.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'IgnoreProjector'}, {'srcline': 63, 'description': 'The camera always exposes while the projector is on.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'WithProjector'}, {'srcline': 64, 'description': 'The camera always exposes while the projector is off.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'WithoutProjector'}]}", &CameraSynchronizerConfig::forearm_l_trig_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<int>("forearm_l_trig_mode", "int", 8, "Indicates the triggering mode of the left forearm camera.", "{'enum_description': 'The triggering mode for a forearm camera.', 'enum': [{'srcline': 61, 'description': 'The camera does not use the trigger input.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'InternalTrigger'}, {'srcline': 62, 'description': 'The cameras frequency can be set independently of the projector frequency. There is no deterministic phase relation between projector firing and camera triggering.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'IgnoreProjector'}, {'srcline': 63, 'description': 'The camera always exposes while the projector is on.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'WithProjector'}, {'srcline': 64, 'description': 'The camera always exposes while the projector is off.', 'srcfile': '/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'WithoutProjector'}]}", &CameraSynchronizerConfig::forearm_l_trig_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.projector_tweak = -0.1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.projector_tweak = 0.1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.projector_tweak = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<double>("projector_tweak", "double", 31, "Adds a time shift in seconds to the projector timing. Useful for debugging but not in normal use.", "", &CameraSynchronizerConfig::projector_tweak)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<double>("projector_tweak", "double", 31, "Adds a time shift in seconds to the projector timing. Useful for debugging but not in normal use.", "", &CameraSynchronizerConfig::projector_tweak)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.camera_reset = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.camera_reset = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.camera_reset = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<bool>("camera_reset", "bool", 31, "Does a hard reset of all the cameras using a long pulse on the trigger line. This parameter resets itself to false after 3 to 4 seconds.", "", &CameraSynchronizerConfig::camera_reset)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(CameraSynchronizerConfig::AbstractParamDescriptionConstPtr(new CameraSynchronizerConfig::ParamDescription<bool>("camera_reset", "bool", 31, "Does a hard reset of all the cameras using a long pulse on the trigger line. This parameter resets itself to false after 3 to 4 seconds.", "", &CameraSynchronizerConfig::camera_reset)));
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(CameraSynchronizerConfig::AbstractGroupDescriptionConstPtr(new CameraSynchronizerConfig::GroupDescription<CameraSynchronizerConfig::DEFAULT, CameraSynchronizerConfig>(Default)));
//#line 366 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<CameraSynchronizerConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<CameraSynchronizerConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<CameraSynchronizerConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    CameraSynchronizerConfig __max__;
    CameraSynchronizerConfig __min__;
    CameraSynchronizerConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const CameraSynchronizerConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static CameraSynchronizerConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &CameraSynchronizerConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const CameraSynchronizerConfig &CameraSynchronizerConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const CameraSynchronizerConfig &CameraSynchronizerConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const CameraSynchronizerConfig &CameraSynchronizerConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<CameraSynchronizerConfig::AbstractParamDescriptionConstPtr> &CameraSynchronizerConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<CameraSynchronizerConfig::AbstractGroupDescriptionConstPtr> &CameraSynchronizerConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const CameraSynchronizerConfigStatics *CameraSynchronizerConfig::__get_statics__()
  {
    const static CameraSynchronizerConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = CameraSynchronizerConfigStatics::get_instance();

    return statics;
  }

//#line 56 "/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg"
      const int CameraSynchronizer_ProjectorOff = 1;
//#line 57 "/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg"
      const int CameraSynchronizer_ProjectorAuto = 2;
//#line 58 "/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg"
      const int CameraSynchronizer_ProjectorOn = 3;
//#line 61 "/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg"
      const int CameraSynchronizer_InternalTrigger = 1;
//#line 62 "/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg"
      const int CameraSynchronizer_IgnoreProjector = 2;
//#line 63 "/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg"
      const int CameraSynchronizer_WithProjector = 3;
//#line 64 "/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg"
      const int CameraSynchronizer_WithoutProjector = 4;
//#line 65 "/home/studi/catkin_ws/src/gazebo_ros_pkgs/gazebo_plugins/cfg/CameraSynchronizer.cfg"
      const int CameraSynchronizer_AlternateProjector = 5;
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __CAMERASYNCHRONIZERRECONFIGURATOR_H__
