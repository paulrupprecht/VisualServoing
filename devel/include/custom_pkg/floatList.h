// Generated by gencpp from file custom_pkg/floatList.msg
// DO NOT EDIT!


#ifndef CUSTOM_PKG_MESSAGE_FLOATLIST_H
#define CUSTOM_PKG_MESSAGE_FLOATLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_pkg
{
template <class ContainerAllocator>
struct floatList_
{
  typedef floatList_<ContainerAllocator> Type;

  floatList_()
    : old()
    , new()  {
    }
  floatList_(const ContainerAllocator& _alloc)
    : old(_alloc)
    , new(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _old_type;
  _old_type old;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _new_type;
  _new_type new;





  typedef boost::shared_ptr< ::custom_pkg::floatList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_pkg::floatList_<ContainerAllocator> const> ConstPtr;

}; // struct floatList_

typedef ::custom_pkg::floatList_<std::allocator<void> > floatList;

typedef boost::shared_ptr< ::custom_pkg::floatList > floatListPtr;
typedef boost::shared_ptr< ::custom_pkg::floatList const> floatListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_pkg::floatList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_pkg::floatList_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'custom_pkg': ['/home/studi/catkin_ws/src/custom_pkg/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_pkg::floatList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_pkg::floatList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_pkg::floatList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_pkg::floatList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_pkg::floatList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_pkg::floatList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_pkg::floatList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea878b1bd38d0c31ddfedc174bfca32e";
  }

  static const char* value(const ::custom_pkg::floatList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea878b1bd38d0c31ULL;
  static const uint64_t static_value2 = 0xddfedc174bfca32eULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_pkg::floatList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_pkg/floatList";
  }

  static const char* value(const ::custom_pkg::floatList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_pkg::floatList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] old\n"
"float64[] new\n"
"\n"
;
  }

  static const char* value(const ::custom_pkg::floatList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_pkg::floatList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.old);
      stream.next(m.new);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct floatList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_pkg::floatList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_pkg::floatList_<ContainerAllocator>& v)
  {
    s << indent << "old[]" << std::endl;
    for (size_t i = 0; i < v.old.size(); ++i)
    {
      s << indent << "  old[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.old[i]);
    }
    s << indent << "new[]" << std::endl;
    for (size_t i = 0; i < v.new.size(); ++i)
    {
      s << indent << "  new[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.new[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_PKG_MESSAGE_FLOATLIST_H
